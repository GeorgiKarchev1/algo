(()=>{var e={};e.id=877,e.ids=[877],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29021:e=>{"use strict";e.exports=require("fs")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{"use strict";e.exports=require("path")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},61093:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>h,routeModule:()=>y,serverHooks:()=>R,workAsyncStorage:()=>O,workUnitAsyncStorage:()=>g});var s={};r.r(s),r.d(s,{GET:()=>f});var o=r(96559),a=r(48088),i=r(37719),n=r(87550),l=r.n(n),p=r(32190),d=r(33873),u=r.n(d),c=r(29021),m=r.n(c);let b=u().join(process.cwd(),"db","leetcode_problems.db");class x{constructor(){this.db=null}connect(){if(!this.db){if(!m().existsSync(b))throw Error("Database not found. Please initialize the database first.");this.db=new(l())(b)}return this.db}getDailyProblem(e=null){let t=this.connect(),r=`
            SELECT 
                p.*,
                dp.featured_date,
                GROUP_CONCAT(DISTINCT e.example_text ORDER BY e.example_order) as examples,
                GROUP_CONCAT(DISTINCT c.constraint_text ORDER BY c.constraint_order) as constraints
            FROM problems p
            JOIN daily_problems dp ON p.problem_id = dp.problem_id
            LEFT JOIN examples e ON p.problem_id = e.problem_id
            LEFT JOIN constraints c ON p.problem_id = c.problem_id
            WHERE dp.featured_date = COALESCE(?, DATE('now'))
            GROUP BY p.id
        `,s=t.prepare(r).get(e);return s&&(s.examples=s.examples?s.examples.split(","):[],s.constraints=s.constraints?s.constraints.split(","):[]),s}getStats(){let e=this.connect();return{totalProblems:e.prepare("SELECT COUNT(*) as count FROM problems").get().count,easyProblems:e.prepare("SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Easy'").get().count,mediumProblems:e.prepare("SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Medium'").get().count,hardProblems:e.prepare("SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Hard'").get().count,dailyProblems:e.prepare("SELECT COUNT(*) as count FROM daily_problems").get().count}}close(){this.db&&(this.db.close(),this.db=null)}}let E=new x;async function f(e){try{let{searchParams:t}=new URL(e.url),r=t.get("date"),s=E.getDailyProblem(r),o=E.getStats();if(!s)return p.NextResponse.json({error:"No daily problem found for the specified date"},{status:404});let a={id:s.problem_id,title:s.title,slug:s.slug,difficulty:s.difficulty,description:s.description,examples:s.examples,constraints:s.constraints,url:s.url,featuredDate:s.featured_date};return p.NextResponse.json({success:!0,data:{dailyProblem:a,stats:o}})}catch(e){return console.error("Error fetching daily problem:",e),p.NextResponse.json({error:"Failed to fetch daily problem",details:e.message},{status:500})}}let y=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/leetcode/daily/route",pathname:"/api/leetcode/daily",filename:"route",bundlePath:"app/api/leetcode/daily/route"},resolvedPagePath:"/Users/Apple/Downloads/Learning/src/app/api/leetcode/daily/route.js",nextConfigOutput:"",userland:s}),{workAsyncStorage:O,workUnitAsyncStorage:g,serverHooks:R}=y;function h(){return(0,i.patchFetch)({workAsyncStorage:O,workUnitAsyncStorage:g})}},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},87550:e=>{"use strict";e.exports=require("better-sqlite3")},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[447,580],()=>r(61093));module.exports=s})();
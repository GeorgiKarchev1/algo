{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Downloads/Learning/src/app/api/leetcode/problems/route.js"],"sourcesContent":["import Database from 'better-sqlite3';\nimport { NextResponse } from 'next/server';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DB_PATH = path.join(process.cwd(), 'db', 'leetcode_problems.db');\n\nclass ProblemsManager {\n    constructor() {\n        this.db = null;\n    }\n\n    connect() {\n        if (!this.db) {\n            if (!fs.existsSync(DB_PATH)) {\n                throw new Error('Database not found. Please initialize the database first.');\n            }\n            this.db = new Database(DB_PATH);\n        }\n        return this.db;\n    }\n\n    getAllProblems(options = {}) {\n        const db = this.connect();\n        const {\n            page = 1,\n            limit = 12,\n            search = '',\n            difficulty = 'all',\n            sortBy = 'title',\n            sortOrder = 'ASC'\n        } = options;\n\n        const offset = (page - 1) * limit;\n\n        // Build the WHERE clause\n        let whereClause = '';\n        const params = [];\n\n        if (search) {\n            whereClause += ' WHERE (p.title LIKE ? OR p.description LIKE ?)';\n            params.push(`%${search}%`, `%${search}%`);\n        }\n\n        if (difficulty !== 'all') {\n            whereClause += search ? ' AND' : ' WHERE';\n            if (difficulty === 'medium-hard') {\n                whereClause += ' p.difficulty IN (?, ?)';\n                params.push('Medium', 'Hard');\n            } else {\n                whereClause += ' p.difficulty = ?';\n                params.push(difficulty);\n            }\n        }\n\n        // Build ORDER BY clause\n        const validSortFields = ['title', 'difficulty', 'problem_id'];\n        const validSortOrders = ['ASC', 'DESC'];\n        const safeSortBy = validSortFields.includes(sortBy) ? sortBy : 'title';\n        const safeSortOrder = validSortOrders.includes(sortOrder) ? sortOrder : 'ASC';\n\n        const query = `\n            SELECT \n                p.problem_id,\n                p.title,\n                p.slug,\n                p.difficulty,\n                p.description,\n                p.url,\n                COUNT(e.id) as example_count,\n                COUNT(c.id) as constraint_count\n            FROM problems p\n            LEFT JOIN examples e ON p.problem_id = e.problem_id\n            LEFT JOIN constraints c ON p.problem_id = c.problem_id\n            ${whereClause}\n            GROUP BY p.problem_id\n            ORDER BY p.${safeSortBy} ${safeSortOrder}\n            LIMIT ? OFFSET ?\n        `;\n\n        // Get total count for pagination\n        const countQuery = `\n            SELECT COUNT(DISTINCT p.problem_id) as total\n            FROM problems p\n            ${whereClause}\n        `;\n\n        const stmt = db.prepare(query);\n        const countStmt = db.prepare(countQuery);\n\n        const problems = stmt.all(...params, limit, offset);\n        const totalResult = countStmt.get(...params);\n        const total = totalResult.total;\n\n        return {\n            problems,\n            pagination: {\n                page,\n                limit,\n                total,\n                totalPages: Math.ceil(total / limit),\n                hasNext: page < Math.ceil(total / limit),\n                hasPrev: page > 1\n            },\n            filters: {\n                search,\n                difficulty,\n                sortBy,\n                sortOrder\n            }\n        };\n    }\n\n    getProblemBySlug(slug) {\n        const db = this.connect();\n        const query = `\n            SELECT \n                p.*,\n                GROUP_CONCAT(DISTINCT e.example_text ORDER BY e.example_order) as examples,\n                GROUP_CONCAT(DISTINCT c.constraint_text ORDER BY c.constraint_order) as constraints\n            FROM problems p\n            LEFT JOIN examples e ON p.problem_id = e.problem_id\n            LEFT JOIN constraints c ON p.problem_id = c.problem_id\n            WHERE p.slug = ?\n            GROUP BY p.problem_id\n        `;\n        \n        const stmt = db.prepare(query);\n        const result = stmt.get(slug);\n        \n        if (result) {\n            result.examples = result.examples ? result.examples.split(',') : [];\n            result.constraints = result.constraints ? result.constraints.split(',') : [];\n        }\n        \n        return result;\n    }\n\n    getRandomProblem(difficulty = 'all') {\n        const db = this.connect();\n        \n        // Build WHERE clause for difficulty filtering\n        let whereClause = '';\n        const params = [];\n        \n        if (difficulty !== 'all') {\n            if (difficulty === 'medium-hard') {\n                whereClause = ' WHERE p.difficulty IN (?, ?)';\n                params.push('Medium', 'Hard');\n            } else {\n                whereClause = ' WHERE p.difficulty = ?';\n                params.push(difficulty);\n            }\n        }\n        \n        const query = `\n            SELECT \n                p.*,\n                GROUP_CONCAT(DISTINCT e.example_text ORDER BY e.example_order) as examples,\n                GROUP_CONCAT(DISTINCT c.constraint_text ORDER BY c.constraint_order) as constraints\n            FROM problems p\n            LEFT JOIN examples e ON p.problem_id = e.problem_id\n            LEFT JOIN constraints c ON p.problem_id = c.problem_id\n            ${whereClause}\n            GROUP BY p.problem_id\n            ORDER BY RANDOM()\n            LIMIT 1\n        `;\n        \n        const stmt = db.prepare(query);\n        const result = stmt.get(...params);\n        \n        if (result) {\n            result.examples = result.examples ? result.examples.split(',') : [];\n            result.constraints = result.constraints ? result.constraints.split(',') : [];\n        }\n        \n        return result;\n    }\n\n    close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n    }\n}\n\nconst problemsManager = new ProblemsManager();\n\nexport async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        \n        // Check if it's a request for a random problem\n        if (searchParams.get('random') === 'true') {\n            const difficulty = searchParams.get('difficulty') || 'all';\n            const randomProblem = problemsManager.getRandomProblem(difficulty);\n            \n            if (!randomProblem) {\n                return NextResponse.json(\n                    { error: 'No problems found' },\n                    { status: 404 }\n                );\n            }\n\n            return NextResponse.json({\n                success: true,\n                data: {\n                    id: randomProblem.problem_id,\n                    title: randomProblem.title,\n                    slug: randomProblem.slug,\n                    difficulty: randomProblem.difficulty,\n                    description: randomProblem.description,\n                    examples: randomProblem.examples,\n                    constraints: randomProblem.constraints,\n                    url: randomProblem.url\n                }\n            });\n        }\n\n        // Parse query parameters\n        const page = parseInt(searchParams.get('page') || '1');\n        const limit = parseInt(searchParams.get('limit') || '12');\n        const search = searchParams.get('search') || '';\n        const difficulty = searchParams.get('difficulty') || 'all';\n        const sortBy = searchParams.get('sortBy') || 'title';\n        const sortOrder = searchParams.get('sortOrder') || 'ASC';\n\n        const result = problemsManager.getAllProblems({\n            page,\n            limit,\n            search,\n            difficulty,\n            sortBy,\n            sortOrder\n        });\n\n        // Transform problems to match frontend interface\n        const transformedProblems = result.problems.map(problem => ({\n            id: problem.problem_id,\n            title: problem.title,\n            slug: problem.slug,\n            difficulty: problem.difficulty,\n            description: problem.description.substring(0, 200) + '...', // Truncate for list view\n            url: problem.url,\n            exampleCount: problem.example_count,\n            constraintCount: problem.constraint_count\n        }));\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                problems: transformedProblems,\n                pagination: result.pagination,\n                filters: result.filters\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching problems:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch problems', details: error.message },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":"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","debugId":null}}]
}
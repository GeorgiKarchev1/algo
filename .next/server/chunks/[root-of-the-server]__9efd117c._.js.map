{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Downloads/Learning/src/app/api/leetcode/daily/route.js"],"sourcesContent":["import Database from 'better-sqlite3';\nimport { NextResponse } from 'next/server';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DB_PATH = path.join(process.cwd(), 'db', 'leetcode_problems.db');\n\nclass DatabaseManager {\n    constructor() {\n        this.db = null;\n    }\n\n    connect() {\n        if (!this.db) {\n            if (!fs.existsSync(DB_PATH)) {\n                throw new Error('Database not found. Please initialize the database first.');\n            }\n            this.db = new Database(DB_PATH);\n        }\n        return this.db;\n    }\n\n    getDailyProblem(date = null) {\n        const db = this.connect();\n        const query = `\n            SELECT \n                p.*,\n                dp.featured_date,\n                GROUP_CONCAT(DISTINCT e.example_text ORDER BY e.example_order) as examples,\n                GROUP_CONCAT(DISTINCT c.constraint_text ORDER BY c.constraint_order) as constraints\n            FROM problems p\n            JOIN daily_problems dp ON p.problem_id = dp.problem_id\n            LEFT JOIN examples e ON p.problem_id = e.problem_id\n            LEFT JOIN constraints c ON p.problem_id = c.problem_id\n            WHERE dp.featured_date = COALESCE(?, DATE('now'))\n            GROUP BY p.id\n        `;\n        \n        const stmt = db.prepare(query);\n        const result = stmt.get(date);\n        \n        if (result) {\n            // Parse the concatenated strings back to arrays\n            result.examples = result.examples ? result.examples.split(',') : [];\n            result.constraints = result.constraints ? result.constraints.split(',') : [];\n        }\n        \n        return result;\n    }\n\n    getStats() {\n        const db = this.connect();\n        const stats = {\n            totalProblems: db.prepare('SELECT COUNT(*) as count FROM problems').get().count,\n            easyProblems: db.prepare(\"SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Easy'\").get().count,\n            mediumProblems: db.prepare(\"SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Medium'\").get().count,\n            hardProblems: db.prepare(\"SELECT COUNT(*) as count FROM problems WHERE difficulty = 'Hard'\").get().count,\n            dailyProblems: db.prepare('SELECT COUNT(*) as count FROM daily_problems').get().count,\n        };\n        \n        return stats;\n    }\n\n    close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n    }\n}\n\nconst dbManager = new DatabaseManager();\n\nexport async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const date = searchParams.get('date');\n        \n        const dailyProblem = dbManager.getDailyProblem(date);\n        const stats = dbManager.getStats();\n        \n        if (!dailyProblem) {\n            return NextResponse.json(\n                { error: 'No daily problem found for the specified date' },\n                { status: 404 }\n            );\n        }\n\n        // Transform the data to match the frontend interface\n        const transformedProblem = {\n            id: dailyProblem.problem_id,\n            title: dailyProblem.title,\n            slug: dailyProblem.slug,\n            difficulty: dailyProblem.difficulty,\n            description: dailyProblem.description,\n            examples: dailyProblem.examples,\n            constraints: dailyProblem.constraints,\n            url: dailyProblem.url,\n            featuredDate: dailyProblem.featured_date\n        };\n\n        return NextResponse.json({\n            success: true,\n            data: {\n                dailyProblem: transformedProblem,\n                stats: stats\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching daily problem:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch daily problem', details: error.message },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM;AAE/C,MAAM;IACF,aAAc;QACV,IAAI,CAAC,EAAE,GAAG;IACd;IAEA,UAAU;QACN,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACV,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,UAAU;gBACzB,MAAM,IAAI,MAAM;YACpB;YACA,IAAI,CAAC,EAAE,GAAG,IAAI,2HAAA,CAAA,UAAQ,CAAC;QAC3B;QACA,OAAO,IAAI,CAAC,EAAE;IAClB;IAEA,gBAAgB,OAAO,IAAI,EAAE;QACzB,MAAM,KAAK,IAAI,CAAC,OAAO;QACvB,MAAM,QAAQ,CAAC;;;;;;;;;;;;QAYf,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,CAAC;QACxB,MAAM,SAAS,KAAK,GAAG,CAAC;QAExB,IAAI,QAAQ;YACR,gDAAgD;YAChD,OAAO,QAAQ,GAAG,OAAO,QAAQ,GAAG,OAAO,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE;YACnE,OAAO,WAAW,GAAG,OAAO,WAAW,GAAG,OAAO,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE;QAChF;QAEA,OAAO;IACX;IAEA,WAAW;QACP,MAAM,KAAK,IAAI,CAAC,OAAO;QACvB,MAAM,QAAQ;YACV,eAAe,GAAG,OAAO,CAAC,0CAA0C,GAAG,GAAG,KAAK;YAC/E,cAAc,GAAG,OAAO,CAAC,oEAAoE,GAAG,GAAG,KAAK;YACxG,gBAAgB,GAAG,OAAO,CAAC,sEAAsE,GAAG,GAAG,KAAK;YAC5G,cAAc,GAAG,OAAO,CAAC,oEAAoE,GAAG,GAAG,KAAK;YACxG,eAAe,GAAG,OAAO,CAAC,gDAAgD,GAAG,GAAG,KAAK;QACzF;QAEA,OAAO;IACX;IAEA,QAAQ;QACJ,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,EAAE,CAAC,KAAK;YACb,IAAI,CAAC,EAAE,GAAG;QACd;IACJ;AACJ;AAEA,MAAM,YAAY,IAAI;AAEf,eAAe,IAAI,OAAO;IAC7B,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,aAAa,GAAG,CAAC;QAE9B,MAAM,eAAe,UAAU,eAAe,CAAC;QAC/C,MAAM,QAAQ,UAAU,QAAQ;QAEhC,IAAI,CAAC,cAAc;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAgD,GACzD;gBAAE,QAAQ;YAAI;QAEtB;QAEA,qDAAqD;QACrD,MAAM,qBAAqB;YACvB,IAAI,aAAa,UAAU;YAC3B,OAAO,aAAa,KAAK;YACzB,MAAM,aAAa,IAAI;YACvB,YAAY,aAAa,UAAU;YACnC,aAAa,aAAa,WAAW;YACrC,UAAU,aAAa,QAAQ;YAC/B,aAAa,aAAa,WAAW;YACrC,KAAK,aAAa,GAAG;YACrB,cAAc,aAAa,aAAa;QAC5C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,MAAM;gBACF,cAAc;gBACd,OAAO;YACX;QACJ;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;YAAiC,SAAS,MAAM,OAAO;QAAC,GACjE;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}
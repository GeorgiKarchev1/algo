{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/Apple/Downloads/Learning/src/app/api/leetcode/problems/%5Bslug%5D/route.js"],"sourcesContent":["import Database from 'better-sqlite3';\nimport { NextResponse } from 'next/server';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DB_PATH = path.join(process.cwd(), 'db', 'leetcode_problems.db');\n\nclass ProblemDetailManager {\n    constructor() {\n        this.db = null;\n    }\n\n    connect() {\n        if (!this.db) {\n            if (!fs.existsSync(DB_PATH)) {\n                throw new Error('Database not found. Please initialize the database first.');\n            }\n            this.db = new Database(DB_PATH);\n        }\n        return this.db;\n    }\n\n    getProblemBySlug(slug) {\n        const db = this.connect();\n        const query = `\n            SELECT \n                p.*,\n                GROUP_CONCAT(DISTINCT e.example_text ORDER BY e.example_order) as examples,\n                GROUP_CONCAT(DISTINCT c.constraint_text ORDER BY c.constraint_order) as constraints\n            FROM problems p\n            LEFT JOIN examples e ON p.problem_id = e.problem_id\n            LEFT JOIN constraints c ON p.problem_id = c.problem_id\n            WHERE p.slug = ?\n            GROUP BY p.problem_id\n        `;\n        \n        const stmt = db.prepare(query);\n        const result = stmt.get(slug);\n        \n        if (result) {\n            result.examples = result.examples ? result.examples.split(',') : [];\n            result.constraints = result.constraints ? result.constraints.split(',') : [];\n        }\n        \n        return result;\n    }\n\n    getNextProblem(currentSlug) {\n        const db = this.connect();\n        const query = `\n            SELECT slug, title\n            FROM problems \n            WHERE problem_id > (\n                SELECT problem_id FROM problems WHERE slug = ?\n            )\n            ORDER BY problem_id ASC\n            LIMIT 1\n        `;\n        \n        const stmt = db.prepare(query);\n        return stmt.get(currentSlug);\n    }\n\n    getPreviousProblem(currentSlug) {\n        const db = this.connect();\n        const query = `\n            SELECT slug, title\n            FROM problems \n            WHERE problem_id < (\n                SELECT problem_id FROM problems WHERE slug = ?\n            )\n            ORDER BY problem_id DESC\n            LIMIT 1\n        `;\n        \n        const stmt = db.prepare(query);\n        return stmt.get(currentSlug);\n    }\n\n    getRelatedProblems(currentSlug, difficulty) {\n        const db = this.connect();\n        const query = `\n            SELECT slug, title, difficulty\n            FROM problems \n            WHERE slug != ? AND difficulty = ?\n            ORDER BY RANDOM()\n            LIMIT 3\n        `;\n        \n        const stmt = db.prepare(query);\n        return stmt.all(currentSlug, difficulty);\n    }\n\n    close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n    }\n}\n\nconst problemDetailManager = new ProblemDetailManager();\n\nexport async function GET(request, { params }) {\n    try {\n        const { slug } = params;\n        \n        if (!slug) {\n            return NextResponse.json(\n                { error: 'Problem slug is required' },\n                { status: 400 }\n            );\n        }\n\n        const problem = problemDetailManager.getProblemBySlug(slug);\n        \n        if (!problem) {\n            return NextResponse.json(\n                { error: 'Problem not found' },\n                { status: 404 }\n            );\n        }\n\n        // Get navigation problems\n        const nextProblem = problemDetailManager.getNextProblem(slug);\n        const previousProblem = problemDetailManager.getPreviousProblem(slug);\n        const relatedProblems = problemDetailManager.getRelatedProblems(slug, problem.difficulty);\n\n        // Transform the data to match the frontend interface\n        const transformedProblem = {\n            id: problem.problem_id,\n            title: problem.title,\n            slug: problem.slug,\n            difficulty: problem.difficulty,\n            description: problem.description,\n            examples: problem.examples,\n            constraints: problem.constraints,\n            url: problem.url,\n            navigation: {\n                next: nextProblem,\n                previous: previousProblem,\n                related: relatedProblems\n            }\n        };\n\n        return NextResponse.json({\n            success: true,\n            data: transformedProblem\n        });\n\n    } catch (error) {\n        console.error('Error fetching problem details:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch problem details', details: error.message },\n            { status: 500 }\n        );\n    }\n} "],"names":[],"mappings":"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","debugId":null}}]
}